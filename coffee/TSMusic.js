// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.URL) == null) {
    window.URL = window.webkitURL;
  }

  if ((_ref1 = window.AudioContext) == null) {
    window.AudioContext = window.webkitAudioContext;
  }

  window.TSMusic = {
    test: function() {
      return (window.FileReader != null) && (window.Blob != null) && (window.Audio != null) && (window.URL != null) && (window.AudioContext != null);
    }
  };

  TSMusic.Array = {
    find: function(arr, find) {
      var index, value, _i, _len;

      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        value = arr[index];
        if (value === find) {
          return index;
        }
      }
      return -1;
    },
    remove: function(arr, value) {
      var index;

      if ((index = TSMusic.Array.find(arr, value)) !== -1) {
        return arr.splice(index, 1);
      }
    },
    uint8_array_to_string: function(arr) {
      var code, str, _i, _len;

      str = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        code = arr[_i];
        str.push(String.fromCharCode(code));
      }
      return str.join("");
    }
  };

  TSMusic.String = {
    zero_fill: function(str, len) {
      var index;

      index = 0;
      while (index < len - str.length) {
        str = "0" + str;
        index++;
      }
      return str;
    }
  };

  TSMusic.File = {
    encode_test: new RegExp(["[\\xC0-\\xDF]([^\\x80-\\xBF]|$)", "[\\xE0-\\xEF].{0,1}([^\\x80-\\xBF]|$)", "[\\xF0-\\xF7].{0,2}([^\\x80-\\xBF]|$)", "[\\xF8-\\xFB].{0,3}([^\\x80-\\xBF]|$)", "[\\xFC-\\xFD].{0,4}([^\\x80-\\xBF]|$)", "[\\xFE-\\xFE].{0,5}([^\\x80-\\xBF]|$)", "[\\x00-\\x7F][\\x80-\\xBF]", "[\\xC0-\\xDF].[\\x80-\\xBF]", "[\\xE0-\\xEF]..[\\x80-\\xBF]", "[\\xF0-\\xF7]...[\\x80-\\xBF]", "[\\xF8-\\xFB]....[\\x80-\\xBF]", "[\\xFC-\\xFD].....[\\x80-\\xBF]", "[\\xFE-\\xFE]......[\\x80-\\xBF]", "^[\\x80-\\xBF]"].join("|")),
    read_text_from_blob: function(blob, handle) {
      var reader,
        _this = this;

      reader = new FileReader;
      reader.readAsText(blob, "utf-8");
      return reader.onload = function() {
        var result;

        result = reader.result;
        if (!_this.encode_test.test(result)) {
          return handle(result);
        } else {
          reader = new FileReader;
          reader.readAsText(blob, "gbk");
          return reader.onload = function() {
            return handle(this.result);
          };
        }
      };
    },
    read_array_buffer_from_blob: function(blob, handle) {
      var reader;

      reader = new FileReader;
      reader.readAsArrayBuffer(blob);
      return reader.onload = function() {
        return handle(this.result);
      };
    },
    read_text_from_array: function(array, handle) {
      var blob;

      if (array instanceof ArrayBuffer) {
        array = new Uint8Array(array);
      }
      blob = new Blob([array]);
      return this.read_text_from_blob(blob, handle);
    }
  };

  TSMusic.Loader = {
    load: function(url, handle) {
      var xhr;

      xhr = new XMLHttpRequest;
      xhr.open("GET", url, true);
      xhr.send();
      return xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || xhr.status === 1223) {
            return handle(xhr.responseText);
          }
        }
      };
    }
  };

  TSMusic.EventDispatcher = (function() {
    function EventDispatcher() {
      this.parent = null;
      this._listener = [];
      this._events = [];
    }

    EventDispatcher.prototype.bind = function(type, handle) {
      var _base, _base1, _ref2, _ref3,
        _this = this;

      if ((_ref2 = (_base = this._listener)[type]) == null) {
        _base[type] = function(event) {
          var _i, _len, _ref3, _results;

          _ref3 = _this._events[type];
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            handle = _ref3[_i];
            _results.push(handle.call(_this, event));
          }
          return _results;
        };
      }
      return ((_ref3 = (_base1 = this._events)[type]) != null ? _ref3 : _base1[type] = []).push(handle);
    };

    EventDispatcher.prototype.unbind = function(type, handle) {
      if (this._events[type]) {
        return TSMusic.Array.remove(this._events[type], handle);
      }
    };

    EventDispatcher.prototype.fire = function(type, event) {
      var _ref2;

      if (event == null) {
        event = new TSMusic.Event(type);
      }
      if ((_ref2 = this._listener[type]) != null) {
        _ref2.call(this, event);
      }
      if (!event.cancelTSMusicubble && this.parent) {
        return this.parent.fire(type, event);
      }
    };

    return EventDispatcher;

  })();

  TSMusic.Event = (function() {
    function Event(type) {
      this.type = type;
      this.cancelTSMusicubble = false;
    }

    Event.prototype.stopPropagation = function() {
      return this.cancelTSMusicubble = true;
    };

    return Event;

  })();

  TSMusic.Widget = (function(_super) {
    __extends(Widget, _super);

    function Widget() {
      Widget.__super__.constructor.apply(this, arguments);
      this.plugins = {};
    }

    Widget.prototype.plug = function(plugin) {
      if (plugin instanceof TSMusic.Plugin) {
        plugin.init(this);
        return this.plugins[plugin.name] = plugin;
      }
    };

    Widget.prototype.unplug = function(name) {
      var _ref2;

      if (name instanceof TSMusic.Plugin) {
        name = name.name;
      }
      if ((_ref2 = this.plugins[name]) != null) {
        _ref2.uninit();
      }
      return delete this.plugins[name];
    };

    return Widget;

  })(TSMusic.EventDispatcher);

  TSMusic.Plugin = (function(_super) {
    __extends(Plugin, _super);

    Plugin.count = 0;

    Plugin.events = {};

    Plugin.type = "undefined";

    function Plugin(name) {
      var func, _ref2, _ref3;

      this.name = name;
      Plugin.__super__.constructor.apply(this, arguments);
      if ((_ref2 = this.name) == null) {
        this.name = this.constructor.type + this.constructor.count++;
      }
      this.widget = null;
      this._handles = {};
      _ref3 = this.constructor.events;
      for (name in _ref3) {
        func = _ref3[name];
        this._handles[name] = this[func].bind(this);
      }
    }

    Plugin.prototype.init = function(widget) {
      var func, name, _ref2;

      if (this.widget) {
        this.uninit();
      }
      this.widget = widget;
      _ref2 = this._handles;
      for (name in _ref2) {
        func = _ref2[name];
        this.widget.bind(name, func);
      }
      return typeof this._init === "function" ? this._init() : void 0;
    };

    Plugin.prototype.uninit = function() {
      var func, name, _ref2;

      if (typeof this._uninit === "function") {
        this._uninit();
      }
      _ref2 = this._handles;
      for (name in _ref2) {
        func = _ref2[name];
        this.widget.unbind(name, func);
      }
      return this.widget = null;
    };

    Plugin.prototype._init = null;

    Plugin.prototype._uninit = null;

    return Plugin;

  })(TSMusic.EventDispatcher);

  TSMusic.Main = (function(_super) {
    __extends(Main, _super);

    function Main() {
      var slide,
        _this = this;

      Main.__super__.constructor.apply(this, arguments);
      this.audio = null;
      this.audio_context = new AudioContext;
      this.media_source = null;
      this.script_processor = this.audio_context.createScriptProcessor(4096);
      this.audio_analyser = this.audio_context.createAnalyser();
      this.gain_node = this.audio_context.createGain();
      this.script_processor.connect(this.audio_context.destination);
      this.audio_analyser.connect(this.gain_node);
      this.gain_node.connect(this.audio_context.destination);
      this.toggle = document.getElementById("toggle");
      this.slider = document.getElementById("slider");
      this.mute = document.getElementById("mute");
      this.volume = document.getElementById("volume");
      this.playing = false;
      this.isdown = false;
      this.muted = false;
      this.toggle.onclick = function() {
        if (_this.playing) {
          return _this.pause();
        } else {
          return _this.play();
        }
      };
      slide = this.get_handle(function() {
        _this.isdown = false;
        return _this.seek(_this.slider.value);
      }, 200, 500);
      this.slider.onchange = function() {
        _this.isdown = true;
        return slide();
      };
      this.mute.onclick = function() {
        _this.muted = !_this.muted;
        if (_this.muted) {
          _this.gain_node.gain.value = 0;
          return _this.mute.value = "打开音量";
        } else {
          _this.gain_node.gain.value = _this.volume.value;
          return _this.mute.value = "关闭音量";
        }
      };
      this.volume.onchange = this.get_handle(function() {
        if (!_this.muted) {
          return _this.gain_node.gain.value = _this.volume.value;
        }
      }, 200, 500);
      this.script_processor.onaudioprocess = function() {
        _this.update();
        if (!_this.isdown) {
          if (_this.audio && _this.audio.readyState > 3) {
            _this.slider.max = _this.audio.duration;
            return _this.slider.value = _this.audio.currentTime;
          } else {
            _this.slider.max = 0;
            return _this.slider.value = 0;
          }
        }
      };
      this.audio_url = null;
      this.update = this.get_handle(function() {
        if (_this.playing) {
          return _this.fire("update");
        }
      }, 50, 50);
    }

    Main.prototype.load = function(url) {
      var _this = this;

      if (this.audio) {
        this.pause();
        this.media_source.disconnect();
      }
      this.toggle.disabled = "";
      this.slider.disabled = "";
      this.audio = new Audio;
      this.audio.src = url;
      this.audio.loop = "loop";
      this.fire("load");
      return this.audio.addEventListener("canplay", function() {
        _this.media_source = _this.audio_context.createMediaElementSource(_this.audio);
        _this.media_source.connect(_this.script_processor);
        _this.media_source.connect(_this.audio_analyser);
        _this.play();
        return _this.fire("loaded");
      });
    };

    Main.prototype.load_from_file = function(file) {
      if (this.audio_url) {
        URL.revokeObjectURL(this.audio_url);
      }
      this.audio_url = URL.createObjectURL(file);
      return this.load(this.audio_url);
    };

    Main.prototype.play = function() {
      if (this.audio) {
        this.audio.play();
        this.playing = true;
        this.toggle.value = "暂停";
        return this.fire("pause");
      }
    };

    Main.prototype.pause = function() {
      if (this.audio) {
        this.audio.pause();
        this.playing = false;
        this.toggle.value = "播放";
        return this.fire("play");
      }
    };

    Main.prototype.seek = function(time) {
      if (this.audio) {
        this.audio.currentTime = time;
        return this.fire("seek");
      }
    };

    Main.prototype.get_handle = function(handle, delay, max) {
      var t_start, timer;

      timer = -1;
      t_start = 0;
      return function() {
        var args, t_current,
          _this = this;

        args = arguments;
        t_current = new Date().getTime();
        clearTimeout(timer);
        if (!t_start) {
          t_start = t_current;
        }
        if (t_current - t_start >= max) {
          handle.apply(this, args);
          return t_start = t_current;
        } else {
          return timer = setTimeout(function() {
            handle.apply(_this, args);
            return t_start = t_current;
          }, delay);
        }
      };
    };

    return Main;

  })(TSMusic.Widget);

}).call(this);
